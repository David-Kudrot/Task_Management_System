[
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "TaskCategory",
        "importPath": "category.models",
        "description": "category.models",
        "isExtraImport": true,
        "detail": "category.models",
        "documentation": {}
    },
    {
        "label": "TaskCategory",
        "importPath": "category.models",
        "description": "category.models",
        "isExtraImport": true,
        "detail": "category.models",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "TaskModel",
        "importPath": "task.models",
        "description": "task.models",
        "isExtraImport": true,
        "detail": "task.models",
        "documentation": {}
    },
    {
        "label": "TaskModel",
        "importPath": "task.models",
        "description": "task.models",
        "isExtraImport": true,
        "detail": "task.models",
        "documentation": {}
    },
    {
        "label": "TaskModel",
        "importPath": "task.models",
        "description": "task.models",
        "isExtraImport": true,
        "detail": "task.models",
        "documentation": {}
    },
    {
        "label": "TaskModel",
        "importPath": "task.models",
        "description": "task.models",
        "isExtraImport": true,
        "detail": "task.models",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "CategoryForm",
        "importPath": "category.forms",
        "description": "category.forms",
        "isExtraImport": true,
        "detail": "category.forms",
        "documentation": {}
    },
    {
        "label": "TaskForm",
        "importPath": "task.forms",
        "description": "task.forms",
        "isExtraImport": true,
        "detail": "task.forms",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "category.migrations.0001_initial",
        "description": "category.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('task', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='TaskCategory',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "category.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "category.migrations.0002_alter_taskcategory_categoryname_and_more",
        "description": "category.migrations.0002_alter_taskcategory_categoryname_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('category', '0001_initial'),\n        ('task', '0002_alter_taskmodel_iscompleted_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='taskcategory',\n            name='categoryName',\n            field=models.CharField(max_length=100, verbose_name='Category Name'),",
        "detail": "category.migrations.0002_alter_taskcategory_categoryname_and_more",
        "documentation": {}
    },
    {
        "label": "CategoryConfig",
        "kind": 6,
        "importPath": "category.apps",
        "description": "category.apps",
        "peekOfCode": "class CategoryConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'category'",
        "detail": "category.apps",
        "documentation": {}
    },
    {
        "label": "CategoryForm",
        "kind": 6,
        "importPath": "category.forms",
        "description": "category.forms",
        "peekOfCode": "class CategoryForm(forms.ModelForm):\n    class Meta:\n        model = TaskCategory\n        fields = '__all__'",
        "detail": "category.forms",
        "documentation": {}
    },
    {
        "label": "TaskCategory",
        "kind": 6,
        "importPath": "category.models",
        "description": "category.models",
        "peekOfCode": "class TaskCategory(models.Model):\n    categoryName = models.CharField(max_length=100, verbose_name='Category Name')\n    taskModel = models.ForeignKey(TaskModel, on_delete=models.CASCADE, verbose_name='Task Name')\n    def __str__(self) -> str:\n        return self.categoryName",
        "detail": "category.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "category.urls",
        "description": "category.urls",
        "peekOfCode": "urlpatterns = [\n    path('add/', views.add_category, name='add_category'),\n]",
        "detail": "category.urls",
        "documentation": {}
    },
    {
        "label": "add_category",
        "kind": 2,
        "importPath": "category.views",
        "description": "category.views",
        "peekOfCode": "def add_category(request):\n    if request.method == 'POST':\n        cat_form = CategoryForm(request.POST)\n        if cat_form.is_valid():\n            cat_form.save()\n            return redirect('add_category')\n    else:\n        cat_form = CategoryForm()\n    return render(request, 'add_category.html', {'form': cat_form})",
        "detail": "category.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "task.migrations.0001_initial",
        "description": "task.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='TaskModel',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('taskTitle', models.CharField(max_length=100)),",
        "detail": "task.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "task.migrations.0002_alter_taskmodel_iscompleted_and_more",
        "description": "task.migrations.0002_alter_taskmodel_iscompleted_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('task', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='taskmodel',\n            name='isCompleted',\n            field=models.BooleanField(default=False, verbose_name='Task Completed?'),\n        ),",
        "detail": "task.migrations.0002_alter_taskmodel_iscompleted_and_more",
        "documentation": {}
    },
    {
        "label": "TaskConfig",
        "kind": 6,
        "importPath": "task.apps",
        "description": "task.apps",
        "peekOfCode": "class TaskConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'task'",
        "detail": "task.apps",
        "documentation": {}
    },
    {
        "label": "TaskForm",
        "kind": 6,
        "importPath": "task.forms",
        "description": "task.forms",
        "peekOfCode": "class TaskForm(forms.ModelForm):\n    class Meta:\n        model = TaskModel\n        fields = '__all__'",
        "detail": "task.forms",
        "documentation": {}
    },
    {
        "label": "TaskModel",
        "kind": 6,
        "importPath": "task.models",
        "description": "task.models",
        "peekOfCode": "class TaskModel(models.Model):\n    taskTitle = models.CharField(max_length=100, verbose_name='Task Title')\n    taskDescription = models.TextField(verbose_name='Task Description')\n    isCompleted = models.BooleanField(default=False, verbose_name='Task Completed?')\n    taskAssignDate = models.DateField(verbose_name='Task Assign Date')\n    def __str__(self) -> str:\n        return self.taskTitle",
        "detail": "task.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "task.urls",
        "description": "task.urls",
        "peekOfCode": "urlpatterns = [\n    path('add/', views.add_task, name='add_task'),\n    path('show_task/', views.show_task, name='show_task'),\n    path('edit/<int:id>', views.edit_task, name='edit_task'),\n    path('delete/<int:id>', views.delete_task, name='delete_task')\n]",
        "detail": "task.urls",
        "documentation": {}
    },
    {
        "label": "add_task",
        "kind": 2,
        "importPath": "task.views",
        "description": "task.views",
        "peekOfCode": "def add_task(request):\n    if request.method == 'POST':\n        task_form = TaskForm(request.POST)\n        if task_form.is_valid():\n            task_form.save()\n            return redirect('add_task')\n    else:\n        task_form = TaskForm()\n    return render(request, 'task.html', {'form': task_form})\ndef show_task(request):",
        "detail": "task.views",
        "documentation": {}
    },
    {
        "label": "show_task",
        "kind": 2,
        "importPath": "task.views",
        "description": "task.views",
        "peekOfCode": "def show_task(request):\n    tasks = TaskModel.objects.all()\n    return render(request, 'show_task.html', {'tasks': tasks})\ndef edit_task(request, id):\n    task = get_object_or_404(TaskModel, pk=id)\n    tasks = TaskModel.objects.all()\n    if request.method == 'POST':\n        task_form = TaskForm(request.POST, instance=task)\n        if task_form.is_valid():\n            task_form.save()",
        "detail": "task.views",
        "documentation": {}
    },
    {
        "label": "edit_task",
        "kind": 2,
        "importPath": "task.views",
        "description": "task.views",
        "peekOfCode": "def edit_task(request, id):\n    task = get_object_or_404(TaskModel, pk=id)\n    tasks = TaskModel.objects.all()\n    if request.method == 'POST':\n        task_form = TaskForm(request.POST, instance=task)\n        if task_form.is_valid():\n            task_form.save()\n            return render(request, 'show_task.html', {'tasks': tasks})\n    else:\n        task_form = TaskForm(instance=task)",
        "detail": "task.views",
        "documentation": {}
    },
    {
        "label": "delete_task",
        "kind": 2,
        "importPath": "task.views",
        "description": "task.views",
        "peekOfCode": "def delete_task(request, id):\n    task = TaskModel.objects.get(pk=id)\n    task.delete()\n    return redirect('show_task')",
        "detail": "task.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "Task_Management_System.asgi",
        "description": "Task_Management_System.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "Task_Management_System.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "Task_Management_System.settings",
        "description": "Task_Management_System.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-0x$0-)*j88yt4uxo84*!%hqq-o&z@&g=k=%i6ff4h#9h)l=$5='\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "Task_Management_System.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "Task_Management_System.settings",
        "description": "Task_Management_System.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-0x$0-)*j88yt4uxo84*!%hqq-o&z@&g=k=%i6ff4h#9h)l=$5='\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "Task_Management_System.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "Task_Management_System.settings",
        "description": "Task_Management_System.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "Task_Management_System.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "Task_Management_System.settings",
        "description": "Task_Management_System.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'task',",
        "detail": "Task_Management_System.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "Task_Management_System.settings",
        "description": "Task_Management_System.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'task',\n    'category',\n    \"crispy_forms\",",
        "detail": "Task_Management_System.settings",
        "documentation": {}
    },
    {
        "label": "CRISPY_ALLOWED_TEMPLATE_PACKS",
        "kind": 5,
        "importPath": "Task_Management_System.settings",
        "description": "Task_Management_System.settings",
        "peekOfCode": "CRISPY_ALLOWED_TEMPLATE_PACKS = \"bootstrap5\"\nCRISPY_TEMPLATE_PACK = \"bootstrap5\"\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',",
        "detail": "Task_Management_System.settings",
        "documentation": {}
    },
    {
        "label": "CRISPY_TEMPLATE_PACK",
        "kind": 5,
        "importPath": "Task_Management_System.settings",
        "description": "Task_Management_System.settings",
        "peekOfCode": "CRISPY_TEMPLATE_PACK = \"bootstrap5\"\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]",
        "detail": "Task_Management_System.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "Task_Management_System.settings",
        "description": "Task_Management_System.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'Task_Management_System.urls'",
        "detail": "Task_Management_System.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "Task_Management_System.settings",
        "description": "Task_Management_System.settings",
        "peekOfCode": "ROOT_URLCONF = 'Task_Management_System.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': ['templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "Task_Management_System.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "Task_Management_System.settings",
        "description": "Task_Management_System.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': ['templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "Task_Management_System.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "Task_Management_System.settings",
        "description": "Task_Management_System.settings",
        "peekOfCode": "WSGI_APPLICATION = 'Task_Management_System.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "Task_Management_System.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "Task_Management_System.settings",
        "description": "Task_Management_System.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "Task_Management_System.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "Task_Management_System.settings",
        "description": "Task_Management_System.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "Task_Management_System.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "Task_Management_System.settings",
        "description": "Task_Management_System.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "Task_Management_System.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "Task_Management_System.settings",
        "description": "Task_Management_System.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "Task_Management_System.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "Task_Management_System.settings",
        "description": "Task_Management_System.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "Task_Management_System.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "Task_Management_System.settings",
        "description": "Task_Management_System.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "Task_Management_System.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "Task_Management_System.settings",
        "description": "Task_Management_System.settings",
        "peekOfCode": "STATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "Task_Management_System.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "Task_Management_System.settings",
        "description": "Task_Management_System.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "Task_Management_System.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "Task_Management_System.urls",
        "description": "Task_Management_System.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', views.home, name='home'),\n    path('task/', include('task.urls')),\n    path('category/', include('category.urls')),\n]",
        "detail": "Task_Management_System.urls",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "Task_Management_System.views",
        "description": "Task_Management_System.views",
        "peekOfCode": "def home(request):\n    return render(request, 'home.html')",
        "detail": "Task_Management_System.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "Task_Management_System.wsgi",
        "description": "Task_Management_System.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "Task_Management_System.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'Task_Management_System.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]